from Spotfire.Dxp.Data import DataFunctionDefinitionBuilder, DataType

def add_output_params_if_missing(dfname, outputvars):
    """
    Adds missing output parameters to an existing data function definition.

    :param dfname: Name of the data function
    :param outputvars: List of (param_name, param_type) tuples. e.g., [("output1", DataType.Table), ("output2", DataType.Table)]
    """
    # Find the data function instance
    existing_function = None
    for df in Document.Data.DataFunctions:
        if df.Name == dfname:
            existing_function = df
            break

    if existing_function is None:
        raise Exception("Data Function '{}' not found.".format(dfname))

    # Access the definition through the function's DefinitionReference
    definition = existing_function.DefinitionReference
    script = definition.Script
    language = definition.ScriptLanguage

    # Prepare builder with existing script
    builder = DataFunctionDefinitionBuilder(language)
    builder.Script = script

    # Track existing output parameters
    existing_outputs = [p.Name for p in definition.Parameters if p.IsOutput]

    # Re-add all current parameters
    for param in definition.Parameters:
        if param.IsOutput:
            builder.AddOutputParameter(param.Name, param.Type)
        else:
            builder.AddInputParameter(param.Name, param.Type)

    # Add missing output parameters
    added_any = False
    for param_name, param_type in outputvars:
        if param_name not in existing_outputs:
            builder.AddOutputParameter(param_name, param_type)
            added_any = True
            print("✅ Added missing output parameter: {}".format(param_name))
        else:
            print("⚠️ Output parameter '{}' already exists.".format(param_name))

    # Only update definition if needed
    if added_any:
        new_def = builder.Build()
        existing_function.DefinitionReference = new_def
        existing_function.Refresh()
